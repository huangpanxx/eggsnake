package com.maple.eggsnake;


import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.physics.box2d.CircleShape;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;

public class Game implements ApplicationListener {
	private World world;
	protected OrthographicCamera camera;
	protected Box2DDebugRenderer renderer;
	
	public void create() {
		camera = new OrthographicCamera(20,20);
		camera.position.set(10,10,0);
		renderer = new Box2DDebugRenderer();
		
		world = new World(new Vector2(0f,-9.8f),true);
		
		createWall();
		
	
		
		BodyDef bd = new BodyDef();
		bd.position.set(10f,10f);
		bd.type = BodyType.DynamicBody;
		Body b = world.createBody(bd);
		CircleShape c = new CircleShape();
		c.setRadius(1f);
		FixtureDef def = new FixtureDef();
		def.density = 1.0f;
		def.friction = 0.3f;
		def.restitution = 1.0f;
		def.shape = c;
		b.createFixture(def);
		
		BodyDef bd2 = new BodyDef();
		bd2.position.set(10f,15f);
		bd2.type = BodyType.DynamicBody;
		Body b2 = world.createBody(bd2);
		CircleShape c2 = new CircleShape();
		c2.setRadius(0.5f);
		FixtureDef def2 = new FixtureDef();
		def2.density = 0.5f;
		def2.friction = 0.3f;
		def2.restitution = 1.0f;
		def2.shape = c2;
		b2.createFixture(def);
	
	}
	
	private void createWall(){
		BodyDef leftWallDef = new BodyDef();
		leftWallDef.type = BodyType.StaticBody;
		leftWallDef.position.set(10f,0);
		Body leftWall = world.createBody(leftWallDef);
		FixtureDef def = new FixtureDef();
		def.density = 1.0f;
		def.friction = 0.3f;
		def.restitution = 1.0f;
		
		PolygonShape shape = new PolygonShape();
		shape.setAsBox(5,1);
		
		def.shape = shape;
		
		leftWall.createFixture(def);
		
		
	}
	
	public void render() {
		world.step(Gdx.app.getGraphics().getDeltaTime(), 50, 50);
		GL10 gl = Gdx.app.getGraphics().getGL10();
		gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		camera.update();
		camera.apply(gl);
		renderer.render(world, camera.combined);
	}
	
	public void resize(int width,int height) {
		
	}
	public void  pause() {
		
	}
	public void  resume() {
		
	}
	public void dispose() {
		
	}
}