/* 
 * Description	: Game Manager, Singleton mode
 * Author		: 黄攀
 * Created		: 2012-1-2
 */

package com.maple.eggsnake.application;

import java.util.Stack;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Screen;
import com.maple.eggsnake.screen.StartScreen;

public class EggSnakeManager implements ApplicationListener, ScreenManageable {

	// The only instance
	private static EggSnakeManager instance = null;

	public static EggSnakeManager getInstance() {
		if (instance == null)
			instance = new EggSnakeManager();
		return instance;
	}

	private Screen currentScreen = null;
	private Stack<Screen> Screens = new Stack<Screen>();

	// Singleton Mode
	private EggSnakeManager() {

	}

	@Override
	public void create() {
		this.requestNavigate(new StartScreen(this));
	}

	@Override
	public void dispose() {
		// TODO Auto-generated method stub

	}

	@Override
	public void pause() {
		// TODO Auto-generated method stub

	}

	@Override
	public void render() {
		// TODO Auto-generated method stub

	}

	@Override
	public void resize(int arg0, int arg1) {
		// TODO Auto-generated method stub

	}

	@Override
	public void resume() {
		// TODO Auto-generated method stub

	}

	/**
	 * 用于切换场景,如果存在场景正在运行,则通知其退出,然后切换新场景
	 * 
	 * @see com.maple.eggsnake.application.ScreenManageable#requestNavigate(com.maple
	 *      .eggsnake.screen.Screen)
	 */
	@Override
	public void navigate(Screen screen) {
			this.currentScreen = screen;
	}

	/**
	 * 将场景加入等待栈中
	 * 
	 * @param screen
	 */
	private void addScreenToWaitingStack(Screen screen) {
		Screens.push(screen);
	}


	/**
	 * 向场景发送通知,通知其退出
	 * 
	 * @param screen
	 */
	private void requestExitScreen(Screen screen) {
		screen.requestExit(this);
	}
}
